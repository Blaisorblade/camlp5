#!/usr/bin/perl

use strict ;
use Data::Dumper ;
use Carp::Assert ;
use File::Basename;
use File::Find ;
use File::Spec ;
use File::stat ;
use Getopt::Long;
use IPC::System::Simple qw(systemx runx capturex $EXITVAL);
use String::ShellQuote ;

our $verbose = 0 ;
our $preserve = 0 ;
our $continue_error = 0 ;
our @dopackages ;
our @onlyfiles ;
our $tool1 ;
our $tool2 ;

our %tools = (
  'roundtrip-revised' =>
  {
    'name' => 'roundtrip-revised',
	'command' => sub {
	  return ('tools/ROUNDTRIP-pa_r-pr_r', @_) ;
    },
  },

  'cp' =>
  {
    'name' => 'cp',
	'command' => sub {
	  return ('/bin/cp', @_) ;
    },
  },

  'lexer-passthru' => {
    'name' => 'lexer-passthru',
	'command' => sub {
	  return ("./roundtrip_lexer.byte","-mode","lexer-passthru", @_) ;
    },
  },

  'lexer-pa-pr' => {
    'name' => 'lexer-pa-pr',
	'command' => sub {
	  return ("./roundtrip_lexer.byte","-mode","parse-pp", @_) ;
    },
  },

  'ifdef-eval' => {
    'name' => 'ifdef-eval',
	'command' => sub {
	  return ("./roundtrip_lexer.byte","-D", "STRICT", "-mode","ifdef-eval", @_) ;
    },
  },
    ) ;

our %packages = (
  'camlp5.7.11' =>
  {
    'package' => 'camlp5.7.11',
    'location' => '..',
	'dirs' => [ qw(lib main meta etc top odyl ocpp compile) ],
	'files' => [],
	'exclude' => {
	  'roundtrip-pa_r-pr_r' => [
	      ],
	  'roundtrip-revised' => [
	    "lib/ploc.ml",
	    "lib/pprintf.ml",
	    "lib/plexer.ml",
	    "lib/grammar.ml",
	    "main/mLast.mli",
	    "main/pcaml.mli",
	    "meta/pa_macro.ml",
	    "meta/pa_r.ml",
# this sucker shows a big in pr_r
	    "meta/q_MLast.ml",
	    "etc/elexer.ml",
# wrong syntax (LISP)
	    "etc/pa_lisp.ml",
# wrong syntax (Scheme)
	    "etc/pa_scheme.ml",
# unimplemented AST printer
	    "etc/pa_mkast.ml",
# unimplemented fparser printer
	    "etc/pa_pprintf.ml",
# unimplemented AST printer
	    "etc/pa_reloc.ml",
# pretty-printing for stream parsers isn't up to snuff
	    "etc/pa_sml.ml",
# uses pprintf, but nothing exists to rebuild pprintf (pr_pprintf)
# applies to all these printers
	    "etc/pr_extend.ml",
	    "etc/pr_extfun.ml",
	    "etc/pr_extprint.ml",
	    "etc/pr_op.ml",
	    "etc/pr_ro.ml",
	    "etc/pr_rp.ml",
	    "etc/pr_schemep.ml",
	    "etc/pr_scheme.ml",
	    "etc/pr_o.ml",
	    "etc/pr_r.ml",
	    "etc/papr_phony_macro.ml",
# unimplemented AST printer
	    "etc/pa_mktest.ml",
# unimplemented printer for stream-parsers
	    "etc/pa_o.ml",
# TODO: use GITIGNORE to ignore temporary files
	    "compile/tmp.o_concat.ml",
	    "compile/tmp.ml",
	    "compile/tmp.mli",
	    "compile/pa_o_fast.ml",
# another instance of pr_r bug
	    "top/rprint.ml",
# unimplemented printer for stream-parsers
	    "ocpp/ocpp.ml",
# this seems like original syntax -- skip
	    "odyl/odyl_config.ml",
	      ],
    },
  },
    ) ;

{

  GetOptions("tool1=s" => \$tool1,
	     "tool2=s" => \$tool2,
	     "package=s{}" => \@dopackages,
	     "only-files=s{}" => \@onlyfiles,
	     "verbose" => \$verbose,
	     "preserve" => \$preserve,
	     "continue-on-error" => \$continue_error,
      )
      or die("Error in command line arguments\n");

  push(@dopackages, @ARGV) ;

  die "tool $tool1 not recognized"
      unless exists $tools{$tool1} ;

  die "tool $tool2 not recognized"
      unless exists $tools{$tool2} ;

  die "must specify packages" unless @dopackages ;

  foreach my $pkgna (@dopackages) {
    die "package $pkgna not recognized"
	unless exists $packages{$pkgna} ;
  }

  my $workdir = "workdir" ;

  foreach my $pkgna (@dopackages) {
    my $pkgh = $packages{$pkgna} ;
    $pkgh->{'onlyfiles'} = [ @onlyfiles ] if @onlyfiles ; 
    runtest_package($workdir,
		    $tools{$tool1},
		    $tools{$tool2},
		    $pkgh);
  }
}

sub runtest_package {
  my $workroot = shift ;
  my $tool1h = shift ;
  my $tool2h = shift ;
  my $pkgh = shift ;

  my %tool1 = %{ $tool1h };
  my $tool1name = $tool1{'name'} ;

  my %tool2 = %{ $tool2h };
  my $tool2name = $tool2{'name'} ;

  my %pkg = %{ $pkgh };
  my $location = $pkg{'location'} ;
  my $workdir = $workroot."/".$pkg{'package'} ;
  my @dirs = @{ $pkg{'dirs'} };
  my @files = @{  $pkg{'files'} } ;

  my %exclude ;
  {
    my @l = () ;
    push (@l, @{ $pkg{'exclude'}->{$tool1name} })
	if (exists $pkg{'exclude'}->{$tool1name}) ;
    push (@l, @{ $pkg{'exclude'}->{$tool2name} })
	if (exists $pkg{'exclude'}->{$tool2name}) ;
    foreach my $f (@l) {
      $exclude{$f} = 1 ;
    }
  }

  my %onlyfiles ;
  {
    my @l = () ;
    push (@l, @{ $pkg{'onlyfiles'} })
	if (exists $pkg{'onlyfiles'}) ;
    foreach my $f (@l) {
      $onlyfiles{$f} = 1 ;
    }
  }

  v_systemx("rm", "-rf", $workdir) ;
  v_systemx("mkdir", "-p", "$workdir/$tool1name", "$workdir/$tool2name") ;

  {
    my @newfiles ;
    my $perfile = sub {
      my $f = $File::Find::name ;
      if ($f =~ /\.ml$/ || $f =~ /\.mli$/) {
	push(@newfiles, $f) ;
      }
    } ;

    find( { wanted => $perfile, no_chdir => 1 }, 
	  (map { $location."/".$_ } @dirs) ) ;

    @newfiles = map { $_ =~ s,^$location/,,; $_ } @newfiles ;

    push(@files, @newfiles) ;
  }

  foreach my $f (@files) {
    next if exists $exclude{$f} ;
    next if int(%onlyfiles) && !(exists $onlyfiles{$f}) ;

    print "==== $f ====\n";
    my $bangf = $f ;
    $bangf =~ s,/,!,g ;

    my @generated_files = () ;
    my $origf = "$location/".$f ;
    my $tool1srcf = "$workdir/$tool1name/".$bangf ;
    my $tool2srcf = "$workdir/$tool2name/".$bangf ;
    my $tool1outf = "$workdir/$tool1name/".$bangf.".OUT" ;
    my $tool2outf = "$workdir/$tool2name/".$bangf.".OUT" ;
    push(@generated_files, $tool1srcf, $tool2srcf,  $tool1outf, $tool2outf) ;

    v_systemx("cp", $origf, $tool1srcf) ;
    my $patch1 = "patches/$pkg{'package'}/$tool1name/".$bangf.".PATCH" ;
    if (-r $patch1) {
      print "PATCHING $tool1srcf\n";
      v_systemx("patch",$tool1srcf, $patch1) ;
    }
    my $code ;
    $code = runtool(tool => \%tool1,
		    'src-filename' => $tool1srcf,
		    'dst-filename' => $tool1outf,
	) ;

    if ($code != 0) {
      warn "aborting processing of $f" ;
      next ;
    }
    v_systemx("cp", $origf, $tool2srcf) ;
    my $patch2 = "patches/$pkg{'package'}/$tool2name/".$bangf.".PATCH" ;
    if (-r $patch2) {
      print "PATCHING $tool2srcf\n";
      v_systemx("patch",$tool2srcf, $patch2) ;
    }
    $code = runtool(tool => \%tool2,
		    'src-filename' => $tool2srcf,
		    'dst-filename' => $tool2outf,
	) ;
    if ($code != 0) {
      warn "aborting processing of $f" ;
      next ;
    }
    v_systemx("tools/normalize-code.pl", $tool1outf, $tool1outf.".NORMALIZED") ;
    v_systemx("tools/normalize-code.pl", $tool2outf, $tool2outf.".NORMALIZED") ;
    push(@generated_files, $tool1outf.".NORMALIZED", $tool2outf.".NORMALIZED") ;

    my $errordir = "$workdir/$tool1name!$tool2name.ERRORS" ;
    v_systemx("mkdir", "-p", $errordir) ;
    my $errorbase = "$errordir/$bangf" ;
    my $code = extended_diff($tool1outf.".NORMALIZED", $tool2outf.".NORMALIZED",
	'errorbase' => $errorbase,
        'generated-files' => \@generated_files,
	) ;
    if (0 == $code && !$preserve) {
      v_systemx("rm", "-f", @generated_files);
    }
  }
}

sub extended_diff {
  my $f1 = shift ;
  my $f2 = shift ;
  my %args = @_ ;

  my @cmd = ("diff", "-Bwiu", $f1, $f2) ;
  my $diff_output = v_capturex([0..1], @cmd) ;
  return 0 if (0 == $EXITVAL) ;

  my $wdiff_output = v_capturex([0..1], "wdiff", "-3", $f1, $f2) ;
  if (exists $args{'errorbase'}) {
    f_write("$args{'errorbase'}.DIFF", $diff_output) ;
    f_write("$args{'errorbase'}.WDIFF", $wdiff_output) ;
    push(@{ $args{'generated-files'} }, "$args{'errorbase'}.DIFF", "$args{'errorbase'}.WDIFF") ;
  }
  return 1 if (0 == $EXITVAL) ;

  if (wordeq($f1, $f2)) {
    print "== $f1 <-> $f2\n" ;
    print "WHITE SPACE DIFFERENCES\n" ;
  }
  else {
    print $diff_output ;
  }
  return 1 ;
}

sub wordeq {
  my $f1 = shift ;
  my $f2 = shift ;

  my $txt1 = f_read($f1) ;
  my $txt2 = f_read($f2) ;

  $txt1 =~ s,\s,,gs ;
  $txt2 =~ s,\s,,gs ;
  return ($txt1 eq $txt2) ;
}

sub runtool {
  my %args = @_ ;
  my $tool = $args{'tool'} ;
  my $srcf = $args{'src-filename'} ;
  my $dstf = $args{'dst-filename'} ;

  print "$tool->{'name'}: $srcf -> $dstf\n" if $main::verbose ;
  my @cmd = &{ $tool->{'command'}, }($srcf, $dstf) ;
  my $code = v_systemx([0..2], @cmd) ;
  if ($code != 0) {
    if (!$continue_error) {
      die ("command <<".join(' ', @cmd).">> died with $@") ;
    }
    else {
      warn ("command <<".join(' ', @cmd).">> died with $@") ;
      return $code ;
    }
  }
  return 0 ;
}

sub v_systemx {
  my $codes ;
  $codes = shift if (ref($_[0]) eq 'ARRAY') ;
  my @cmd = @_ ;
  print STDERR join(' ', map { shell_quote($_) } @cmd)."\n" if ($main::verbose) ;

  if ($codes) {
    return runx($codes, @cmd) ;
  }
  else {
    return runx(@cmd) ;
  }
}

sub v_capturex {
  my $codes ;
  $codes = shift if (ref($_[0]) eq 'ARRAY') ;
  my @cmd = @_ ;
  print STDERR join(' ', map { shell_quote($_) } @cmd)."\n" if ($main::verbose) ;

  if ($codes) {
    return capturex($codes, @cmd) ;
  }
  else {
    return capturex(@cmd) ;
  }
}

sub v_system {
  my $cmd = shift;
  print STDERR "<<$cmd>>\n" if ($main::verbose);
  system $cmd;
}

sub f_read {
  my $f = shift;
  open(F,"<$f") || die "cannot open $f for reading";
  my @l = <F>;
  close(F);
  return (wantarray ? @l : join('', @l)) ;
}

sub f_write {
  my $f = shift;
  open(F,">$f") || die "cannot open $f for writing";
  print F @_;
  close(F);
}
