--- /home/chet/Hack/Ocaml/GENERIC/4.00.0/.opam-switch/sources/ocaml-base-compiler.4.00.0/stdlib/camlinternalLazy.ml	2011-07-27 07:17:02.000000000 -0700
+++ patches/ocaml-4.00.0/ALL/stdlib!camlinternalLazy.ml.INPUT	2020-02-11 17:26:13.240278884 -0800
@@ -21,7 +21,7 @@
 
 (* Assume [blk] is a block with tag lazy *)
 let force_lazy_block (blk : 'arg lazy_t) =
-  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  let closure : unit -> 'arg = Obj.obj (Obj.field (Obj.repr blk) 0) in
   Obj.set_field (Obj.repr blk) 0 raise_undefined;
   try
     let result = closure () in
@@ -35,7 +35,7 @@
 
 (* Assume [blk] is a block with tag lazy *)
 let force_val_lazy_block (blk : 'arg lazy_t) =
-  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  let closure : unit -> 'arg = Obj.obj (Obj.field (Obj.repr blk) 0) in
   Obj.set_field (Obj.repr blk) 0 raise_undefined;
   let result = closure () in
   Obj.set_field (Obj.repr blk) 0 (Obj.repr result);  (* do set_field BEFORE set_tag *)
