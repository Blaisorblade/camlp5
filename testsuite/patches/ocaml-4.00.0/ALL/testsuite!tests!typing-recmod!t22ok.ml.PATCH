--- /home/chet/Hack/Ocaml/GENERIC/4.00.0/.opam-switch/sources/ocaml-base-compiler.4.00.0/testsuite/tests/typing-recmod/t22ok.ml	2011-07-20 02:17:07.000000000 -0700
+++ patches/ocaml-4.00.0/ALL/testsuite!tests!typing-recmod!t22ok.ml.INPUT	2020-02-11 21:03:06.860408280 -0800
@@ -26,7 +26,6 @@
 and ASet : Set.S with type elt = A.t = Set.Make(A)
 ;;
 
-let _ =
   let x = A.Node (ASet.add (A.Leaf 3) (ASet.singleton (A.Leaf 2))) in
   let y = A.Node (ASet.add (A.Leaf 1) (ASet.singleton x)) in
   test 10 (A.compare x x) 0;
@@ -43,7 +42,7 @@
   = struct let f x = if x < 2 then 1 else Fib.f(x-1) + Fib.f(x-2) end
 ;;
 
-let _ =
+
   test 20 (Fib.f 10) 89
 ;;
 
@@ -56,13 +55,13 @@
     end
 ;;
 
-let _ =
+
   test 21 (Fib2.f 10) 89
 ;;
 
 (* Early application *)
 
-let _ =
+
   let res =
     try
       let module A =
@@ -96,7 +95,7 @@
   = struct let x = 3 end
 ;;
 
-let _ =
+
   test 40 After.x 4
 ;;
 
@@ -105,8 +104,8 @@
 module rec Strengthen
   : sig type t val f : t -> t end
   = struct
-      type t = A | B
-      let _ = (A : Strengthen.t)
+      type t = A | B ;;
+      (A : Strengthen.t) ;;
       let f x = if true then A else Strengthen.f B
     end
 ;;
@@ -118,19 +117,19 @@
         module R : sig type v end
     end
   = struct
-      type t = A | B
-      let _ = (A : Strengthen2.t)
+      type t = A | B ;;
+      (A : Strengthen2.t) ;;
       let f x = if true then A else Strengthen2.f B
       module M =
         struct
-          type u = C
+          type u = C ;;
           let _ = (C: Strengthen2.M.u)
         end
       module rec R : sig type v  = Strengthen2.R.v end =
         struct
-          type v = D
-          let _ = (D : R.v)
-          let _ = (D : Strengthen2.R.v)
+          type v = D ;;
+          (D : R.v) ;;
+          (D : Strengthen2.R.v) ;;
         end
     end
 ;;
@@ -144,7 +143,7 @@
     end
   = struct
       type 'a t = Leaf of 'a | Node of 'a list t * 'a list t
-      let x = (PolyRec.Leaf 1 : int t)
+      let x : int t = PolyRec.Leaf 1
       let depth = function
         Leaf x -> 0
       | Node(l,r) -> 1 + max (PolyRec.depth l) (PolyRec.depth r)
@@ -228,7 +227,6 @@
     end
 ;;
 
-let _ =
   let e = Expr.make_let "x" (Expr.Add (Expr.Var "y", Expr.Const 0))
                             (Expr.Var "x") in
   let e' = Expr.make_let "x" (Expr.Var "y") (Expr.Var "x") in
@@ -362,7 +360,6 @@
 
 module C = Bootstrap(LeftistHeap)(Ints);;
 
-let _ =
   let h = List.fold_right C.insert [6;4;8;7;3;1] C.empty in
   test 60 (C.findMin h) 1;
   test 61 (C.findMin (C.deleteMin h)) 3;
@@ -394,11 +391,9 @@
     end
 ;;
 
-let _ =
   test 70 ((new Class1.c)#m 7) 0
 ;;
 
-let _ =
   try
     let module A = struct
        module rec BadClass1
@@ -435,7 +430,6 @@
     end 
 ;;
 
-let _ =
   test 80 (Coerce1.f 10) 3628800
 ;;
 
@@ -451,7 +445,6 @@
        and Coerce3: sig end = struct end
 ;;
 
-let _ =
   test 81 (Coerce2.f1 ()) 1
 ;;
 
@@ -466,8 +459,7 @@
 and Coerce6
   : sig val at: int -> int end
   = Coerce4(Coerce5)
-
-let _ =
+;;
   test 82 (Coerce6.at 100) 5
 ;;
 
@@ -484,28 +476,26 @@
         | _ -> true
     end;; 
 
-let _ =
   test 100 (F.f (F.X 1)) false;
   test 101 (F.f (F.Y 2)) true
+;;
 
 (* PR#4316 *)
 module G(S : sig val x : int Lazy.t end) = struct include S end
 
 module M1 = struct let x = lazy 3 end
-
-let _ = Lazy.force M1.x
+;;
+Lazy.force M1.x ;;
 
 module rec M2 : sig val x : int Lazy.t end = G(M1)
+;;
+  test 102 (Lazy.force M2.x) 3 ;;
 
-let _ =
-  test 102 (Lazy.force M2.x) 3
-
-let _ = Gc.full_major()   (* will shortcut forwarding in M1.x *)
+Gc.full_major() ;;   (* will shortcut forwarding in M1.x *)
 
 module rec M3 : sig val x : int Lazy.t end = G(M1)
-
-let _ =
-  test 103 (Lazy.force M3.x) 3
+;;
+  test 103 (Lazy.force M3.x) 3 ;;
 
 
 (** Pure type-checking tests: see recmod/*.ml  *)
