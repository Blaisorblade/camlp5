--- /home/chet/Hack/Ocaml/GENERIC/4.00.0/.opam-switch/sources/ocaml-base-compiler.4.00.0/testsuite/tests/misc/boyer.ml	2011-07-27 07:17:02.000000000 -0700
+++ patches/ocaml-4.00.0/ALL/testsuite!tests!misc!boyer.ml.INPUT	2020-02-11 20:23:21.659228945 -0800
@@ -116,8 +116,8 @@
   | CProp(p, l) -> Prop(get p, List.map cterm_to_term l)
 
 let add t = add_lemma (cterm_to_term t)
+;;
 
-let _ =
 add (CProp
 ("equal",
  [CProp ("compile",[CVar 5]); 
@@ -863,7 +863,7 @@
              CProp
               ("lt",
                [CProp ("remainder",[CVar 0; CVar 1]);
-                CProp ("member",[CVar 0; CProp ("length",[CVar 1])])])))]
+                CProp ("member",[CVar 0; CProp ("length",[CVar 1])])])))] ;;
 
 let term = cterm_to_term(
            CProp
@@ -879,8 +879,8 @@
                    [CProp ("implies",[CVar 25; CVar 20]);
                     CProp ("implies",[CVar 20; CVar 22])])])]);
               CProp ("implies",[CVar 23; CVar 22])]))
+;;
 
-let _ =
   let ok = ref true in
   for i = 1 to 50 do
     if not (tautp (apply_subst subst term)) then ok := false
@@ -890,7 +890,7 @@
   else
     print_string "Cannot prove!\n";
   exit 0
-
+;;
 (*********
 with
     failure s ->
