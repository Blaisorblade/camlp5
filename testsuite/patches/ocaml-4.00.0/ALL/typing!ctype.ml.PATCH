--- /home/chet/Hack/Ocaml/GENERIC/4.00.0/.opam-switch/sources/ocaml-base-compiler.4.00.0/typing/ctype.ml	2012-07-17 20:34:36.000000000 -0700
+++ patches/ocaml-4.00.0/ALL/typing!ctype.ml.INPUT	2020-02-11 21:23:37.709210832 -0800
@@ -350,7 +350,7 @@
       nm := None;
       let (fl, _) = flatten_fields fi in
       List.iter
-        (function (_, k, _) ->
+        (fun (_, k, _) ->
           match field_kind_repr k with
             Fvar r -> set_kind r Fabsent
           | _      -> ())
@@ -1117,7 +1117,7 @@
         Cty_signature
           {cty_self = copy sign.cty_self;
            cty_vars =
-             Vars.map (function (m, v, ty) -> (m, v, copy ty)) sign.cty_vars;
+             Vars.map (fun (m, v, ty) -> (m, v, copy ty)) sign.cty_vars;
            cty_concr = sign.cty_concr;
            cty_inher =
              List.map (fun (p,tl) -> (p, List.map copy tl)) sign.cty_inher}
@@ -1367,7 +1367,7 @@
     Tconstr (p, _, _) -> repr (expand_abbrev env ty)
   | _ -> raise Cannot_expand
 
-let _ = forward_try_expand_once := try_expand_once
+forward_try_expand_once := try_expand_once ;;
 
 (* Fully expand the head of a type.
    Raise Cannot_expand if the type cannot be expanded.
@@ -1916,7 +1916,7 @@
   if miss1 <> []  && (object_row ty1).desc = Tnil
   || miss2 <> []  && (object_row ty2).desc = Tnil then raise (Unify []);
   List.iter
-    (function (n, k1, t1, k2, t2) ->
+    (fun (n, k1, t1, k2, t2) ->
        mcomp_kind k1 k2;
        mcomp type_pairs subst env t1 t2)
     pairs
@@ -2502,8 +2502,9 @@
       end
   | _ ->
       unify (ref env) t1 t2
+;;
 
-let _ = unify' := unify_var
+unify' := unify_var ;;
 
 let unify_pairs env ty1 ty2 pairs =
   univar_pairs := pairs;
@@ -2989,7 +2990,7 @@
   eqtype rename type_pairs subst env rest1 rest2;
   if (miss1 <> []) || (miss2 <> []) then raise (Unify []);
   List.iter
-    (function (n, k1, t1, k2, t2) ->
+    (fun (n, k1, t1, k2, t2) ->
        eqtype_kind k1 k2;
        try eqtype rename type_pairs subst env t1 t2 with Unify trace ->
          raise (Unify ((newty (Tfield(n, k1, t1, rest2)),
@@ -3776,9 +3777,9 @@
   let cstrs = subtype_rec env [(ty1, ty2)] ty1 ty2 [] in
   TypePairs.clear subtypes;
   (* Enforce constraints. *)
-  function () ->
+  fun () ->
     List.iter
-      (function (trace0, t1, t2, pairs) ->
+      (fun (trace0, t1, t2, pairs) ->
          try unify_pairs (ref env) t1 t2 pairs with Unify trace ->
            raise (Subtype (expand_trace env (List.rev trace0),
                            List.tl (List.tl trace))))
@@ -4055,7 +4056,7 @@
 let nondep_class_signature env id sign =
   { cty_self = nondep_type_rec env id sign.cty_self;
     cty_vars =
-      Vars.map (function (m, v, t) -> (m, v, nondep_type_rec env id t))
+      Vars.map (fun (m, v, t) -> (m, v, nondep_type_rec env id t))
         sign.cty_vars;
     cty_concr = sign.cty_concr;
     cty_inher =
