--- /home/chetsky/Hack/Ocaml/GENERIC/4.00.0/.opam-switch/sources/ocaml-base-compiler.4.00.0/otherlibs/labltk/compiler/printer.ml	2011-07-27 07:17:02.000000000 -0700
+++ patches/ocaml-4.00.0/ALL/otherlibs!labltk!compiler!printer.ml.INPUT	2020-02-11 14:34:29.733714265 -0800
@@ -83,7 +83,7 @@
   | Record l_t_s_m ->
      printf "@[<1>(%s@ " "Record";
      print_list
-      (function (s, m) ->
+      (fun (s, m) ->
         printf "@[<1>("; print_quoted_string s; printf ",@ "; print_mltype m;
         printf ")@]")
       l_t_s_m;
@@ -119,10 +119,10 @@
   | External -> printf "External";;
 
 (* Full definition of a component *)
-let rec print_fullcomponent = function
+let rec print_fullcomponent 
   {component = c; ml_name = s; var_name = s0; template = t; result = m;
    safe = b;
-  } ->
+  } =
     printf "@[<1>{"; printf "@[<1>component =@ "; print_component_type c;
     printf ";@]@ "; printf "@[<1>ml_name =@ "; print_quoted_string s;
     printf ";@]@ "; printf "@[<1>var_name =@ "; print_quoted_string s0;
@@ -144,16 +144,16 @@
 let rec print_parser_arity = function
   | OneToken -> printf "OneToken" | MultipleToken -> printf "MultipleToken";;
 
-let rec print_type_def = function
+let rec print_type_def =
   {parser_arity = p; constructors = l_f; subtypes = l_t_s_l_f;
    requires_widget_context = b; variant = b0;
-  } ->
+  } =
     printf "@[<1>{"; printf "@[<1>parser_arity =@ "; print_parser_arity p;
     printf ";@]@ "; printf "@[<1>constructors =@ ";
     print_list print_fullcomponent l_f; printf ";@]@ ";
     printf "@[<1>subtypes =@ ";
     print_list
-     (function (s, l_f0) ->
+     (fun (s, l_f0) ->
        printf "@[<1>("; print_quoted_string s; printf ",@ ";
        print_list print_fullcomponent l_f0; printf ")@]")
      l_t_s_l_f;
@@ -164,8 +164,8 @@
 let rec print_module_type = function
   | Widget -> printf "Widget" | Family -> printf "Family";;
 
-let rec print_module_def = function
-  {module_type = m; commands = l_f; externals = l_f0; } ->
+let rec print_module_def =
+  {module_type = m; commands = l_f; externals = l_f0; } =
     printf "@[<1>{"; printf "@[<1>module_type =@ "; print_module_type m;
     printf ";@]@ "; printf "@[<1>commands =@ ";
     print_list print_fullcomponent l_f; printf ";@]@ ";
