diff --git a/etc/pa_lispr.ml b/etc/pa_lispr.ml
index bf367bea..2bbd8c72 100644
--- a/etc/pa_lispr.ml
+++ b/etc/pa_lispr.ml
@@ -1,13 +1,17 @@
-(* camlp5 pa_r.cmo pa_rp.cmo pa_extend.cmo q_MLast.cmo pr_dump.cmo *)
+(* camlp5r *)
 (* pa_lisp.ml,v *)
 (* Copyright (c) INRIA 2007-2017 *)
 
+#load "pa_rp.cmo";
+#load "pa_extend.cmo";
+#load "q_MLast.cmo";
+
 open Pcaml;
 open Versdep;
 
-type choice α β =
-  [ Left of α
-  | Right of β ]
+type choice 'a 'b =
+  [ Left of 'a
+  | Right of 'b ]
 ;
 
 (* Buffer *)
@@ -32,8 +36,7 @@ module Buff =
 value rec skip_to_eol len =
   parser
   [ [: `('\n' | '\r' as c) :] -> Buff.store len c
-  | [: `c :] ->
-      let s = strm__ in
+  | [: `c ; s :] ->
       skip_to_eol (Buff.store len c) s ]
 ;
 
@@ -41,31 +44,22 @@ value no_ident = ['('; ')'; ' '; '\t'; '\n'; '\r'; ';'];
 
 value rec ident len =
   parser
-    [: :] ->
-      match Stream.peek strm__ with
-      [ Some x when not (List.mem x no_ident) → do {
-          Stream.junk strm__;
-          let s = strm__ in
-          ident (Buff.store len x) s
-        }
-      | _ → Buff.get len ]
+  [ [: `x when not (List.mem x no_ident); s :] -> ident (Buff.store len x) s
+  | [: :] -> Buff.get len ]
 ;
 
 value rec string len =
   parser
   [ [: `'"' :] -> Buff.get len
-  | [: `'\\'; `c :] ->
-      let s = strm__ in
+  | [: `'\\'; `c ; s :] ->
       string (Buff.store (Buff.store len '\\') c) s
-  | [: `x :] ->
-      let s = strm__ in
+  | [: `x ; s :] ->
       string (Buff.store len x) s ]
 ;
 
 value rec number len =
   parser
-  [ [: `('0'..'9' as c) :] ->
-      let s = strm__ in
+  [ [: `('0'..'9' as c) ; s :] ->
       number (Buff.store len c) s
   | [: :] -> ("INT", Buff.get len) ]
 ;
@@ -73,8 +67,7 @@ value rec number len =
 value char_or_quote_id x =
   parser
   [ [: `''' :] -> ("CHAR", String.make 1 x)
-  | [: :] ->
-      let s = strm__ in
+  | [: s :] ->
       let len = Buff.store (Buff.store 0 ''') x in
       ("LIDENT", ident len s) ]
 ;
@@ -82,16 +75,14 @@ value char_or_quote_id x =
 value rec char len =
   parser
   [ [: `''' :] -> len
-  | [: `x :] ->
-      let s = strm__ in
+  | [: `x ; s :] ->
       char (Buff.store len x) s ]
 ;
 
 value quote =
   parser
   [ [: `'\\'; len = char (Buff.store 0 '\\') :] -> ("CHAR", Buff.get len)
-  | [: `x :] ->
-      let s = strm__ in
+  | [: `x ; s :] ->
       char_or_quote_id x s ]
 ;
 
@@ -99,20 +90,15 @@ value rec next_token_after_spaces kwt =
   parser bp
   [ [: `'(' :] -> (("", "("), (bp, bp + 1))
   | [: `')' :] -> (("", ")"), (bp, bp + 1))
-  | [: `'"'; s = string 0 :] ->
-      let ep = Stream.count strm__ in
+  | [: `'"'; s = string 0 :] ep ->
       (("STRING", s), (bp, ep))
-  | [: `'''; tok = quote :] ->
-      let ep = Stream.count strm__ in
+  | [: `'''; tok = quote :] ep ->
       (tok, (bp, ep))
-  | [: `'<'; tok = less :] ->
-      let ep = Stream.count strm__ in
+  | [: `'<'; tok = less :] ep ->
       (tok, (bp, ep))
-  | [: `('0'..'9' as c); n = number (Buff.store 0 c) :] ->
-      let ep = Stream.count strm__ in
+  | [: `('0'..'9' as c); n = number (Buff.store 0 c) :] ep ->
       (n, (bp, ep))
-  | [: `x; s = ident (Buff.store 0 x) :] ->
-      let ep = Stream.count strm__ in
+  | [: `x; s = ident (Buff.store 0 x) :] ep ->
       let con =
         try do {
           (Hashtbl.find kwt s : unit);
@@ -133,17 +119,14 @@ and less =
   | [: :] -> ("LIDENT", "<") ]
 and label len =
   parser
-  [ [: `('a'..'z' | 'A'..'Z' | '_' as c) :] ->
-      let s = strm__ in
+  [ [: `('a'..'z' | 'A'..'Z' | '_' as c) ; s :] ->
       label (Buff.store len c) s
   | [: :] -> Buff.get len ]
 and quotation len =
   parser
-  [ [: `'>' :] ->
-      let s = strm__ in
+  [ [: `'>' ; s :] ->
       quotation_greater len s
-  | [: `x :] ->
-      let s = strm__ in
+  | [: `x ; s :] ->
       quotation (Buff.store len x) s
   | [: :] -> failwith "quotation not terminated" ]
 and quotation_greater len =
@@ -156,18 +139,15 @@ value get_buff len _ = Buff.get len;
 
 value rec lexer len kwt =
   parser bp
-  [ [: `(' ' | '\t' | '\n' | '\r' as c) :] ->
-      let s = strm__ in
+  [ [: `(' ' | '\t' | '\n' | '\r' as c) ; s :] ->
       lexer (Buff.store len c) kwt s
   | [: `';'; a = semi (Buff.store len ';') kwt bp :] -> a
   | [: comm = get_buff len; a = next_token_after_spaces kwt :] -> (comm, a) ]
 and semi len kwt bp =
   parser
-  [ [: `';'; len = skip_to_eol (Buff.store len ';') :] ->
-      let s = strm__ in
+  [ [: `';'; len = skip_to_eol (Buff.store len ';') ; s :] ->
       lexer len kwt s
-  | [: :] ->
-      let ep = Stream.count strm__ in
+  | [: :] ep ->
       (Buff.get len, (("", ";"), (bp, ep))) ]
 ;
 
