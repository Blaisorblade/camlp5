--- ../lib/versdep.ml	2020-02-12 19:28:40.270105000 -0800
+++ patches/camlp5.7.11/ALL/lib!versdep.ml.INPUT	2020-02-12 20:49:03.613469803 -0800
@@ -13,9 +13,9 @@
 
 value option_map f x =
   match x with
-  | Some x -> Some (f x)
+  [ Some x -> Some (f x)
   | None -> None
-  end
+  ]
 ;
 value mustSome symbol = fun [
   Some x -> x
@@ -554,9 +554,9 @@
         (fun c ->
            let d =
              match c with
-             | Left (c, a, tl) -> Rtag (mkloc loc c) a tl
+             [ Left (c, a, tl) -> Rtag (mkloc loc c) a tl
              | Right t -> Rinherit t
-             end
+             ]
          in
 	 {prf_desc = d; prf_loc = loc; prf_attributes = []})
       catl
@@ -694,13 +694,13 @@
   IFDEF OCAML_VERSION < OCAML_4_02_0 THEN Pexp_constraint e ot1 ot2
   ELSE
     match ot2 with
-    | Some t2 -> Pexp_coerce e ot1 t2
+    [ Some t2 -> Pexp_coerce e ot1 t2
     | None ->
         match ot1 with
-        | Some t1 -> Pexp_constraint e t1
+        [ Some t1 -> Pexp_constraint e t1
         | None -> failwith "internal error: ocaml_pexp_constraint"
-        end
-    end
+        ]
+    ]
   END
 ;
 
@@ -755,9 +755,9 @@
 value ocaml_case (p, wo, loc, e) =
   IFDEF OCAML_VERSION < OCAML_4_02_0 THEN
     match wo with
-    | Some w -> (p, ocaml_mkexp loc (Pexp_when w e))
+    [ Some w -> (p, ocaml_mkexp loc (Pexp_when w e))
     | None -> (p, e)
-    end
+    ]
   ELSE
     {pc_lhs = p; pc_guard = wo; pc_rhs = e}
   END
@@ -768,13 +768,13 @@
   ELSIFDEF OCAML_VERSION < OCAML_4_02_0 THEN Pexp_function lab eo pel
   ELSE
     match pel with
-    | [{pc_lhs = p; pc_guard = None; pc_rhs = e}] ->
+    [ [{pc_lhs = p; pc_guard = None; pc_rhs = e}] ->
         IFDEF OCAML_VERSION < OCAML_4_03_0 THEN Pexp_fun lab eo p e
         ELSE Pexp_fun (labelled lab) eo p e END
     | pel ->
         if lab = "" && eo = None then Pexp_function pel
         else failwith "internal error: bad ast in ocaml_pexp_function"
-    end
+    ]
   END
 ;
 
@@ -837,13 +837,12 @@
   Pexp_override sel
 ;
 
-value ocaml_pexp_pack =
+value (ocaml_pexp_pack : option (choice ('a -> 'b -> 'c) 'd)) =
   IFDEF OCAML_VERSION < OCAML_3_12 THEN None
   ELSIFDEF OCAML_VERSION < OCAML_3_13_0 THEN
     Some (Left (fun me pt -> Pexp_pack me pt))
   ELSE
-    (Some (Right (fun me -> Pexp_pack me, fun pt -> Ptyp_package pt)) :
-     option (choice ('a -> 'b -> 'c) 'd))
+    Some (Right (fun me -> Pexp_pack me, fun pt -> Ptyp_package pt))
   END
 ;
 
@@ -1031,9 +1030,9 @@
   IFDEF OCAML_VERSION < OCAML_4_02_0 THEN
     let mtd =
       match mto with
-      | None -> Pmodtype_abstract
+      [ None -> Pmodtype_abstract
       | Some t -> Pmodtype_manifest t
-      end
+      ]
     in
     Psig_modtype (mknoloc s) mtd
   ELSE
@@ -1345,13 +1344,12 @@
 END
 ;
 
-value ocaml_pmod_unpack =
+value (ocaml_pmod_unpack : option (choice ('a -> 'b -> 'c) 'd)) =
   IFDEF OCAML_VERSION < OCAML_3_12 THEN None
   ELSIFDEF OCAML_VERSION < OCAML_3_13_0 THEN
     Some (Left (fun e pt -> Pmod_unpack e pt))
   ELSE
-    (Some (Right (fun e -> Pmod_unpack e, fun pt -> Ptyp_package pt)) :
-     option (choice ('a -> 'b -> 'c) 'd))
+  Some (Right (fun e -> Pmod_unpack e, fun pt -> Ptyp_package pt))
   END
 ;
 
@@ -1366,17 +1364,21 @@
   END
 ;
 
-value ocaml_pcf_inher =
   IFDEF OCAML_VERSION <= OCAML_1_07 THEN
-    fun _ _ (id, cl, el, loc) pb -> Pcf_inher (id, cl, el, pb, loc)
+value ocaml_pcf_inher _ _ (id, cl, el, loc) pb =
+  Pcf_inher (id, cl, el, pb, loc) ;
   ELSIFDEF OCAML_VERSION < OCAML_3_12 THEN
-    fun loc _ ce pb -> Pcf_inher ce pb
+value ocaml_pcf_inher loc _ ce pb =
+  Pcf_inher ce pb ;
   ELSIFDEF OCAML_VERSION < OCAML_4_02_0 THEN
-    fun loc ovflag ce pb -> Pcf_inher ovflag ce pb
+value ocaml_pcf_inher loc ovflag ce pb =
+  Pcf_inher ovflag ce pb ;
   ELSIFDEF OCAML_VERSION < OCAML_4_05_0 THEN
-    fun loc ovflag ce pb -> Pcf_inherit ovflag ce pb
+value ocaml_pcf_inher loc ovflag ce pb =
+  Pcf_inherit ovflag ce pb ;
   ELSE
-    fun loc ovflag ce pb -> Pcf_inherit ovflag ce (option_map (mkloc loc) pb)
+value ocaml_pcf_inher loc ovflag ce pb =
+  Pcf_inherit ovflag ce (option_map (mkloc loc) pb) ;
   END
 ;
 
@@ -1577,9 +1579,9 @@
       {pdir_name = mkloc loc s;
        pdir_arg =
          match da with
-         | Some da -> Some {pdira_desc = da; pdira_loc = loc}
+         [ Some da -> Some {pdira_desc = da; pdira_loc = loc}
          | None -> None
-         end;
+         ];
        pdir_loc = loc}
   END
 ;
@@ -1645,34 +1647,37 @@
   ;
 END;
 
-value jocaml_pstr_def =
-  IFDEF JOCAML THEN Some (fun jcl -> Pstr_def (List.map joinclause jcl))
-  ELSE (None : option (_ -> _)) END
+value ( jocaml_pstr_def : option (_ -> _)) =
+ IFDEF JOCAML THEN
+ Some (fun jcl -> Pstr_def (List.map joinclause jcl))
+ ELSE
+ None
+ END
 ;
 
-value jocaml_pexp_def =
+value ( jocaml_pexp_def :  option (_ -> _ -> _) ) =
   IFDEF JOCAML THEN Some (fun jcl e -> Pexp_def (List.map joinclause jcl) e)
-  ELSE (None : option (_ -> _ -> _)) END
+  ELSE None END
 ;
 
-value jocaml_pexp_par =
+value ( jocaml_pexp_par : option (_ -> _ -> _) ) =
   IFDEF JOCAML THEN Some (fun e1 e2 -> Pexp_par e1 e2)
-  ELSE (None : option (_ -> _ -> _)) END
+  ELSE None END
 ;
 
-value jocaml_pexp_reply =
+value (jocaml_pexp_reply : option (_ -> _ -> _ -> _)) =
   IFDEF JOCAML THEN
     let pexp_reply loc e (sloc, s) =
       let ji = {pjident_desc = s; pjident_loc = sloc} in
       Pexp_reply e ji
     in
     Some pexp_reply
-  ELSE (None : option (_ -> _ -> _ -> _)) END
+  ELSE None END
 ;
 
-value jocaml_pexp_spawn =
+value (jocaml_pexp_spawn : option (_ -> _)) =
   IFDEF JOCAML THEN Some (fun e -> Pexp_spawn e)
-  ELSE (None : option (_ -> _)) END
+  ELSE None END
 ;
 
 value arg_rest =
