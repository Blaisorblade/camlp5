diff --git a/main/pcaml.ml b/main/pcaml.ml
index ab9ac6ce..20407a22 100644
--- a/main/pcaml.ml
+++ b/main/pcaml.ml
@@ -16,9 +16,9 @@ value ocaml_version =
       Versdep.sys_ocaml_version
     else
       match Versdep.sys_ocaml_version.[i] with
-      | ' ' | '+' -> String.sub Versdep.sys_ocaml_version 0 i
+      [ ' ' | '+' -> String.sub Versdep.sys_ocaml_version 0 i
       | _ -> loop (i + 1)
-      end
+      ]
 ;
 
 value gram =
@@ -125,7 +125,7 @@ value expand_quotation gloc expander shift name str = do {
     let old_loc = quotation_loc.val in
     fun () -> do {
       warning.val := old_warning;
-      quotation_loc.val := old_loc;
+      quotation_loc.val := old_loc
     }
   in
   warning.val := new_warning;
@@ -154,10 +154,10 @@ value expand_quotation gloc expander shift name str = do {
            let exc1 = Qerror name Expanding exc in
            Ploc.raise gloc exc1 ]
     with
-    [ exn -> do { restore (); raise exn } ]
+    exn -> do { restore (); raise exn }
   in
   restore ();
-  r;
+  r
 };
 
 value parse_quotation_result entry loc shift name str =
@@ -361,7 +361,7 @@ value print_exn =
         Format.print_string ": ";
         Format.print_string str
       }
-      else Format.print_string ".";
+      else Format.print_string "."
     }
   | Failure str -> do {
       Format.print_string "Failure: ";
@@ -377,7 +377,7 @@ value print_exn =
     }
   | x -> do {
       Format.print_string "Uncaught exception: ";
-      Format.print_string (Printexc.to_string x);
+      Format.print_string (Printexc.to_string x)
     } ]
 ;
 
@@ -466,30 +466,30 @@ value index_tab = [""; "₁"; "₂"; "₃"; "₄"; "₅"; "₆"; "₇"; "₈"; "
 value greek_ascii_equiv s =
   loop 0 greek_tab where rec loop i =
     fun
-    [ [g :: gl] -> do {
-        if start_with s g then do {
+    [ [g :: gl] ->
+        if start_with s g then
           let c1 = Char.chr (Char.code 'a' + i) in
           let glen = String.length g in
           let rest = String.sub s glen (String.length s - glen) in
           loop 0 index_tab where rec loop i =
             fun
-            [ [k :: kl] -> do {
-                if rest = k then do {
+            [ [k :: kl] ->
+                if rest = k then
                   let s2 = if i = 0 then "" else string_of_int i in
                   String.make 1 c1 ^ s2
-                }
                 else loop (i + 1) kl
-              }
             | [] -> String.make 1 c1 ^ rest ]
-        }
         else loop (i + 1) gl
-      }
     | [] -> s ]
 ;
 
 (* Mode transitional or strict *)
 
-value strict_mode = ref (IFNDEF STRICT THEN False ELSE True END);
+IFNDEF STRICT THEN 
+value strict_mode = ref False;
+ELSE
+value strict_mode = ref True;
+END ;
 
 value unvala x =
   IFNDEF STRICT THEN x
