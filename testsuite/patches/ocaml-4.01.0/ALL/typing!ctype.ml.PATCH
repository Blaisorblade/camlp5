--- /home/chetsky/Hack/Ocaml/GENERIC/4.01.0/.opam-switch/sources/ocaml-base-compiler.4.01.0/typing/ctype.ml	2013-09-05 22:48:29.000000000 -0700
+++ patches/ocaml-4.01.0/ALL/typing!ctype.ml.INPUT	2020-02-15 23:58:33.773807516 -0800
@@ -349,7 +349,7 @@
       nm := None;
       let (fl, _) = flatten_fields fi in
       List.iter
-        (function (_, k, _) ->
+        (fun (_, k, _) ->
           match field_kind_repr k with
             Fvar r -> set_kind r Fabsent
           | _      -> ())
@@ -1143,7 +1143,7 @@
         Cty_signature
           {cty_self = copy sign.cty_self;
            cty_vars =
-             Vars.map (function (m, v, ty) -> (m, v, copy ty)) sign.cty_vars;
+             Vars.map (fun (m, v, ty) -> (m, v, copy ty)) sign.cty_vars;
            cty_concr = sign.cty_concr;
            cty_inher =
              List.map (fun (p,tl) -> (p, List.map copy tl)) sign.cty_inher}
@@ -1427,8 +1427,8 @@
 (* Safe version of expand_head, never fails *)
 let expand_head env ty =
   try try_expand_head try_expand_safe env ty with Cannot_expand -> repr ty
-
-let _ = forward_try_expand_once := try_expand_safe
+;;
+forward_try_expand_once := try_expand_safe ;;
 
 
 (* Expand until we find a non-abstract type declaration *)
@@ -1994,7 +1994,7 @@
   if miss1 <> []  && (object_row ty1).desc = Tnil
   || miss2 <> []  && (object_row ty2).desc = Tnil then raise (Unify []);
   List.iter
-    (function (n, k1, t1, k2, t2) ->
+    (fun (n, k1, t1, k2, t2) ->
        mcomp_kind k1 k2;
        mcomp type_pairs env t1 t2)
     pairs
@@ -2624,8 +2624,8 @@
       end
   | _ ->
       unify (ref env) t1 t2
-
-let _ = unify' := unify_var
+;;
+unify' := unify_var ;;
 
 let unify_pairs env ty1 ty2 pairs =
   univar_pairs := pairs;
@@ -3106,7 +3106,7 @@
   eqtype rename type_pairs subst env rest1 rest2;
   if (miss1 <> []) || (miss2 <> []) then raise (Unify []);
   List.iter
-    (function (n, k1, t1, k2, t2) ->
+    (fun (n, k1, t1, k2, t2) ->
        eqtype_kind k1 k2;
        try eqtype rename type_pairs subst env t1 t2 with Unify trace ->
          raise (Unify ((newty (Tfield(n, k1, t1, rest2)),
@@ -3891,9 +3891,9 @@
   let cstrs = subtype_rec env [(ty1, ty2)] ty1 ty2 [] in
   TypePairs.clear subtypes;
   (* Enforce constraints. *)
-  function () ->
+  fun () ->
     List.iter
-      (function (trace0, t1, t2, pairs) ->
+      (fun (trace0, t1, t2, pairs) ->
          try unify_pairs (ref env) t1 t2 pairs with Unify trace ->
            raise (Subtype (expand_trace env (List.rev trace0),
                            List.tl (List.tl trace))))
@@ -4170,7 +4170,7 @@
 let nondep_class_signature env id sign =
   { cty_self = nondep_type_rec env id sign.cty_self;
     cty_vars =
-      Vars.map (function (m, v, t) -> (m, v, nondep_type_rec env id t))
+      Vars.map (fun (m, v, t) -> (m, v, nondep_type_rec env id t))
         sign.cty_vars;
     cty_concr = sign.cty_concr;
     cty_inher =
