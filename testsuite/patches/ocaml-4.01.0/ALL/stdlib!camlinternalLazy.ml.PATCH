--- /home/chetsky/Hack/Ocaml/GENERIC/4.01.0/.opam-switch/sources/ocaml-base-compiler.4.01.0/stdlib/camlinternalLazy.ml	2013-03-09 14:38:52.000000000 -0800
+++ patches/ocaml-4.01.0/ALL/stdlib!camlinternalLazy.ml.INPUT	2020-02-15 22:16:36.335807516 -0800
@@ -19,7 +19,7 @@
 
 (* Assume [blk] is a block with tag lazy *)
 let force_lazy_block (blk : 'arg lazy_t) =
-  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  let closure : unit -> 'arg = Obj.obj (Obj.field (Obj.repr blk) 0) in
   Obj.set_field (Obj.repr blk) 0 raise_undefined;
   try
     let result = closure () in
@@ -34,7 +34,7 @@
 
 (* Assume [blk] is a block with tag lazy *)
 let force_val_lazy_block (blk : 'arg lazy_t) =
-  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in
+  let closure : unit -> 'arg = Obj.obj (Obj.field (Obj.repr blk) 0) in
   Obj.set_field (Obj.repr blk) 0 raise_undefined;
   let result = closure () in
   (* do set_field BEFORE set_tag *)
