--- /home/chetsky/Hack/Ocaml/GENERIC/4.01.0/.opam-switch/sources/ocaml-base-compiler.4.01.0/debugger/command_line.ml	2013-03-22 11:18:26.000000000 -0700
+++ patches/ocaml-4.01.0/ALL/debugger!command_line.ml.INPUT	2020-02-15 20:57:36.005807516 -0800
@@ -85,7 +85,7 @@
   end_of_line Lexer.lexeme
 
 let matching_elements list name instr =
-  List.filter (function a -> isprefix instr (name a)) !list
+  List.filter (fun a -> isprefix instr (name a)) !list
 
 let all_matching_instructions =
   matching_elements instruction_list (fun i -> i.instr_name)
@@ -265,11 +265,11 @@
       match new_directory' with
       | mdl :: for_keyw :: tl
         when (String.lowercase for_keyw) = "for" && (List.length tl) > 0 ->
-          List.iter (function x -> add_path_for mdl (expand_path x)) tl
+          List.iter (fun x -> add_path_for mdl (expand_path x)) tl
       | _ ->
-          List.iter (function x -> add_path (expand_path x)) new_directory'
+          List.iter (fun x -> add_path (expand_path x)) new_directory'
     end;
-    let print_dirs ppf l = List.iter (function x -> fprintf ppf "@ %s" x) l in
+    let print_dirs ppf l = List.iter (fun x -> fprintf ppf "@ %s" x) l in
     fprintf ppf "@[<2>Directories: %a@]@." print_dirs !Config.load_path;
     Hashtbl.iter
       (fun mdl dirs ->
@@ -384,7 +384,7 @@
   let rec print_list l =
     try
       eol lexbuf;
-      List.iter (function i -> fprintf ppf "%s@." i) l
+      List.iter (fun i -> fprintf ppf "%s@." i) l
     with _ ->
       remove_file !user_channel
   and match_list lexbuf =
@@ -548,14 +548,14 @@
 let instr_set =
   find_variable
     (fun {var_action = (funct, _)} ppf lexbuf -> funct lexbuf)
-    (function ppf -> error "Argument required.")
+    (fun ppf -> error "Argument required.")
 
 let instr_show =
   find_variable
     (fun {var_action = (_, funct)} ppf lexbuf -> eol lexbuf; funct ppf)
-    (function ppf ->
+    (fun ppf ->
        List.iter
-         (function {var_name = nm; var_action = (_, funct)} ->
+         (fun {var_name = nm; var_action = (_, funct)} ->
               fprintf ppf "%s: " nm;
               funct ppf)
          !variable_list)
@@ -563,7 +563,7 @@
 let instr_info =
   find_info
     (fun i ppf lexbuf -> i.info_action lexbuf)
-    (function ppf ->
+    (fun ppf ->
        error "\"info\" must be followed by the name of an info command.")
 
 let instr_break ppf lexbuf =
@@ -638,7 +638,7 @@
       then remove_all_breakpoints ()
   | breakpoints ->
       List.iter
-        (function x -> try remove_breakpoint x with | Not_found -> ())
+        (fun x -> try remove_breakpoint x with | Not_found -> ())
         breakpoints
 
 let instr_frame ppf lexbuf =
@@ -773,33 +773,33 @@
 
 (** Variables. **)
 let raw_variable kill name =
-  (function lexbuf ->
+  (fun lexbuf ->
      let argument = argument_eol argument lexbuf in
        if (not kill) || ask_kill_program () then name := argument),
-  function ppf -> fprintf ppf "%s@." !name
+  fun ppf -> fprintf ppf "%s@." !name
 
 let raw_line_variable kill name =
-  (function lexbuf ->
+  (fun lexbuf ->
      let argument = argument_eol line_argument lexbuf in
        if (not kill) || ask_kill_program () then name := argument),
-  function ppf -> fprintf ppf "%s@." !name
+  fun ppf -> fprintf ppf "%s@." !name
 
 let integer_variable kill min msg name =
-  (function lexbuf ->
+  (fun lexbuf ->
      let argument = integer_eol Lexer.lexeme lexbuf in
        if argument < min then print_endline msg
        else if (not kill) || ask_kill_program () then name := argument),
-  function ppf -> fprintf ppf "%i@." !name
+  fun ppf -> fprintf ppf "%i@." !name
 
 let int64_variable kill min msg name =
-  (function lexbuf ->
+  (fun lexbuf ->
      let argument = int64_eol Lexer.lexeme lexbuf in
        if argument < min then print_endline msg
        else if (not kill) || ask_kill_program () then name := argument),
-  function ppf -> fprintf ppf "%Li@." !name
+  fun ppf -> fprintf ppf "%Li@." !name
 
 let boolean_variable kill name =
-  (function lexbuf ->
+  (fun lexbuf ->
      let argument =
        match identifier_eol Lexer.lexeme lexbuf with
        | "on" -> true
@@ -807,14 +807,14 @@
        | _ -> error "Syntax error."
      in
        if (not kill) || ask_kill_program () then name := argument),
-  function ppf -> fprintf ppf "%s@." (if !name then "on" else "off")
+  fun ppf -> fprintf ppf "%s@." (if !name then "on" else "off")
 
 let path_variable kill name =
-  (function lexbuf ->
+  (fun lexbuf ->
        let argument = argument_eol argument lexbuf in
          if (not kill) || ask_kill_program () then
            name := make_absolute (expand_path argument)),
-  function ppf -> fprintf ppf "%s@." !name
+  fun ppf -> fprintf ppf "%s@." !name
 
 let loading_mode_variable ppf =
   (find_ident
@@ -822,9 +822,9 @@
      (matching_elements (ref loading_modes) fst)
      (fun (_, mode) ppf lexbuf ->
         eol lexbuf; set_launching_function mode)
-     (function ppf -> error "Syntax error.")
+     (fun ppf -> error "Syntax error.")
      ppf),
-  function ppf ->
+  fun ppf ->
     let rec find = function
       | [] -> ()
       | (name, funct) :: l ->
@@ -834,7 +834,7 @@
       fprintf ppf "@."
 
 let follow_fork_variable =
-  (function lexbuf ->
+  (fun lexbuf ->
      let mode =
        match identifier_eol Lexer.lexeme lexbuf with
        | "child" -> Fork_child
@@ -843,7 +843,7 @@
      in
        fork_mode := mode;
        if !loaded then update_follow_fork_mode ()),
-  function ppf ->
+  fun ppf ->
     fprintf ppf "%s@."
       (match !fork_mode with
          Fork_child -> "child"
@@ -852,7 +852,7 @@
 (** Infos. **)
 
 let pr_modules ppf mods =
- let pr_mods ppf = List.iter (function x -> fprintf ppf "%s@ " x) in
+ let pr_mods ppf = List.iter (fun x -> fprintf ppf "%s@ " x) in
  fprintf ppf "Used modules: @.%a@?" pr_mods mods
 
 let info_modules ppf lexbuf =
@@ -875,14 +875,14 @@
     (if !debug_breakpoints then
        (prerr_endline "               Time   Pid Version";
         List.iter
-          (function
+          (fun
              {c_time = time; c_pid = pid; c_breakpoint_version = version} ->
                Printf.printf "%19Ld %5d %d\n" time pid version)
           !checkpoints)
      else
        (print_endline "               Time   Pid";
         List.iter
-          (function
+          (fun
              {c_time = time; c_pid = pid} ->
                Printf.printf "%19Ld %5d\n" time pid)
           !checkpoints))
@@ -908,7 +908,7 @@
     print_endline ("Module: " ^ mdle);
     print_endline "   Address  Characters        Kind      Repr.";
     List.iter
-      (function ev ->
+      (fun ev ->
         let start_char, end_char =
           try
             let buffer = get_buffer (Events.get_pos ev) ev.ev_module in
@@ -1176,5 +1176,5 @@
      { info_name = "events";
        info_action = info_events ppf;
        info_help = "list events in MODULE (default is current module)." }]
-
-let _ = init std_formatter
+;;
+init std_formatter ;;
