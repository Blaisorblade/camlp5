#!/usr/bin/perl

use Carp::Assert;
use Data::Dumper ;

{
  my @l = <STDIN> ;

  my $ndivs ;
  foreach my $iterl (@l) {
    my $l = $iterl ;
    chomp $l ;
    next unless $l =~ /^\+/ ;
    $l =~ s,[^+],,gs ;
    my $n = length($l) ;
    $ndivs = $n unless defined $ndivs ;
    die "mismatched # of divs in different divider lines ($ndivs <> $n)" if ($ndivs != $n) ;
  }
  
  my $ncols = $ndivs - 1 ;
  my @colwidths ;
  for(my $i = 0 ; $i < $ncols ; $i++) { $colwidths[$i] = 1 ; }

  foreach my $iterl (@l) {
    my $l = $iterl ;
    chomp $l ;
    if ($l =~ /^\+/) {
      # a divider line
      my @segs = split(/\+/, $l) ;
      assert ($segs[0] eq '') ;
      shift @segs ;
      assert (int(@segs) == $ncols) ;
      # don't infer colwidths here, b/c these must be allowed to shrink
    }
    else {
      assert ($l =~ /^\|/) ;
      # a data line
      $l =~ s,^\|,,s ;
      for(my $i = 0 ; $i < $ncols ; $i++) {
	die "bad data row <<$iterl>>"
	    unless $l =~ s,^(\|?(?:[^|`]|(?:``.*?``))*)\|,, ;
	my $cell = $1 ;
	$cell = stripws($cell) ;
	$colwidths[$i] = length($cell) if ($colwidths[$i] < length($cell)) ;
      }
    }
  }

  foreach my $iterl (@l) {
    my $l = $iterl ;
    chomp $l ;
    if ($l =~ /^\+/) {
      # a divider line
      my @segs = split(/\+/, $l) ;
      assert ($segs[0] eq '') ;
      shift @segs ;
      assert (int(@segs) == $ncols) ;
      for(my $i = 0 ; $i < $ncols ; $i++) {
	$segs[$i] = (substr($segs[$i], 0, 1)) x $colwidths[$i] ;
      }
      $iterl = '+'.join('+', @segs)."+\n" ;
    }
    else {
      assert ($l =~ /^\|/) ;
      # a data line
      $l =~ s,^\|,,s ;
      my @segs ;
      for(my $i = 0 ; $i < $ncols ; $i++) {
	die "bad data row <<$iterl>>"
	    unless $l =~ s,^(\|?(?:[^|`]|(?:``.*?``))*)\|,, ;
	my $cell = $1 ;
	$cell = stripws($cell) ;
	my $nspaces = $colwidths[$i] - length($cell) ;
	$cell .= ' ' x $nspaces ;
	push(@segs, $cell) ;
      }
      $iterl = '|'.join('|', @segs)."|\n" ;
    }
  }

  print join('', @l) ;
}

sub stripws {
  my $s = shift ;
  $s =~ s,^\s+,, ;
  $s =~ s,\s+$,, ;
  return $s ;
}
