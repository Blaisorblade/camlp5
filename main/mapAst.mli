(* camlp5r *)
(* $Id: mapAst.mli,v 6.1 2011/02/17 03:14:05 deraugla Exp $ *)

open MLast;

type map_f =
  { tyAcc : loc → ctyp → ctyp → ctyp;
    tyAli : loc → ctyp → ctyp → ctyp;
    tyAny : loc → ctyp;
    tyApp : loc → ctyp → ctyp → ctyp;
    tyArr : loc → ctyp → ctyp → ctyp;
    tyCls : loc → v (list string) → ctyp;
    tyLab : loc → v string → ctyp → ctyp;
    tyLid : loc → v string → ctyp;
    tyMan : loc → ctyp → v bool → ctyp → ctyp;
    tyObj : loc → v (list (string * ctyp)) → v bool → ctyp;
    tyOlb : loc → v string → ctyp → ctyp;
    tyPck : loc → module_type → ctyp;
    tyPol : loc → v (list string) → ctyp → ctyp;
    tyPot : loc → v (list string) → ctyp → ctyp;
    tyQuo : loc → v string → ctyp;
    tyRec : loc → v (list (loc * string * bool * ctyp)) → ctyp;
    tySum :
      loc → v (list (loc * v string * v (list ctyp) * option ctyp)) → ctyp;
    tyTup : loc → v (list ctyp) → ctyp;
    tyUid : loc → v string → ctyp;
    tyVrn :
      loc → v (list poly_variant) → option (option (v (list string))) → ctyp;
    tyXtr : loc → string → option (v ctyp) → ctyp;
    pvTag : loc → v string → v bool → v (list ctyp) → poly_variant;
    pvInh : loc → ctyp → poly_variant;
    paAcc : loc → patt → patt → patt;
    paAli : loc → patt → patt → patt;
    paAnt : loc → patt → patt;
    paAny : loc → patt;
    paApp : loc → patt → patt → patt;
    paArr : loc → v (list patt) → patt;
    paChr : loc → v string → patt;
    paFlo : loc → v string → patt;
    paInt : loc → v string → string → patt;
    paLab : loc → v (list (patt * v (option patt))) → patt;
    paLaz : loc → patt → patt;
    paLid : loc → v string → patt;
    paNty : loc → v string → patt;
    paOlb : loc → patt → v (option expr) → patt;
    paOrp : loc → patt → patt → patt;
    paRec : loc → v (list (patt * patt)) → patt;
    paRng : loc → patt → patt → patt;
    paStr : loc → v string → patt;
    paTup : loc → v (list patt) → patt;
    paTyc : loc → patt → ctyp → patt;
    paTyp : loc → v (list string) → patt;
    paUid : loc → v string → patt;
    paUnp : loc → v string → option module_type → patt;
    paVrn : loc → v string → patt;
    paXtr : loc → string → option (v patt) → patt;
    exAcc : loc → expr → expr → expr;
    exAnt : loc → expr → expr;
    exApp : loc → expr → expr → expr;
    exAre : loc → expr → expr → expr;
    exArr : loc → v (list expr) → expr;
    exAsr : loc → expr → expr;
    exAss : loc → expr → expr → expr;
    exBae : loc → expr → v (list expr) → expr;
    exChr : loc → v string → expr;
    exCoe : loc → expr → option ctyp → ctyp → expr;
    exFlo : loc → v string → expr;
    exFor : loc → v string → expr → expr → v bool → v (list expr) → expr;
    exFun : loc → v (list (patt * v (option expr) * expr)) → expr;
    exIfe : loc → expr → expr → expr → expr;
    exInt : loc → v string → string → expr;
    exLab : loc → v (list (patt * v (option expr))) → expr;
    exLaz : loc → expr → expr;
    exLet : loc → v bool → v (list (patt * expr)) → expr → expr;
    exLid : loc → v string → expr;
    exLmd : loc → v string → module_expr → expr → expr;
    exMat : loc → expr → v (list (patt * v (option expr) * expr)) → expr;
    exNew : loc → v (list string) → expr;
    exObj : loc → v (option patt) → v (list class_str_item) → expr;
    exOlb : loc → patt → v (option expr) → expr;
    exOvr : loc → v (list (string * expr)) → expr;
    exPck : loc → module_expr → option module_type → expr;
    exRec : loc → v (list (patt * expr)) → option expr → expr;
    exSeq : loc → v (list expr) → expr;
    exSnd : loc → expr → v string → expr;
    exSte : loc → expr → expr → expr;
    exStr : loc → v string → expr;
    exTry : loc → expr → v (list (patt * v (option expr) * expr)) → expr;
    exTup : loc → v (list expr) → expr;
    exTyc : loc → expr → ctyp → expr;
    exUid : loc → v string → expr;
    exVrn : loc → v string → expr;
    exWhi : loc → expr → v (list expr) → expr;
    exXtr : loc → string → option (v expr) → expr;
    mtAcc : loc → module_type → module_type → module_type;
    mtApp : loc → module_type → module_type → module_type;
    mtFun : loc → v string → module_type → module_type → module_type;
    mtLid : loc → v string → module_type;
    mtQuo : loc → v string → module_type;
    mtSig : loc → v (list sig_item) → module_type;
    mtTyo : loc → module_expr → module_type;
    mtUid : loc → v string → module_type;
    mtWit : loc → module_type → v (list with_constr) → module_type;
    mtXtr : loc → string → option (v module_type) → module_type;
    sgCls : loc → v (list (class_infos class_type)) → sig_item;
    sgClt : loc → v (list (class_infos class_type)) → sig_item;
    sgDcl : loc → v (list sig_item) → sig_item;
    sgDir : loc → v string → v (option expr) → sig_item;
    sgExc : loc → v string → v (list ctyp) → sig_item;
    sgExt : loc → v string → ctyp → v (list string) → sig_item;
    sgInc : loc → module_type → sig_item;
    sgMod : loc → v bool → v (list (v string * module_type)) → sig_item;
    sgMty : loc → v string → module_type → sig_item;
    sgOpn : loc → v (list string) → sig_item;
    sgTyp : loc → v (list type_decl) → sig_item;
    sgUse : loc → v string → v (list (sig_item * loc)) → sig_item;
    sgVal : loc → v string → ctyp → sig_item;
    sgXtr : loc → string → option (v sig_item) → sig_item;
    wcMod : loc → v (list string) → module_expr → with_constr;
    wcMos : loc → v (list string) → module_expr → with_constr;
    wcTyp :
      loc → v (list string) → v (list type_var) → v bool → ctyp → with_constr;
    wcTys : loc → v (list string) → v (list type_var) → ctyp → with_constr;
    meAcc : loc → module_expr → module_expr → module_expr;
    meApp : loc → module_expr → module_expr → module_expr;
    meFun : loc → v string → module_type → module_expr → module_expr;
    meStr : loc → v (list str_item) → module_expr;
    meTyc : loc → module_expr → module_type → module_expr;
    meUid : loc → v string → module_expr;
    meUnp : loc → expr → option module_type → module_expr;
    meXtr : loc → string → option (v module_expr) → module_expr;
    stCls : loc → v (list (class_infos class_expr)) → str_item;
    stClt : loc → v (list (class_infos class_type)) → str_item;
    stDcl : loc → v (list str_item) → str_item;
    stDir : loc → v string → v (option expr) → str_item;
    stExc : loc → v string → v (list ctyp) → v (list string) → str_item;
    stExp : loc → expr → str_item;
    stExt : loc → v string → ctyp → v (list string) → str_item;
    stInc : loc → module_expr → str_item;
    stMod : loc → v bool → v (list (v string * module_expr)) → str_item;
    stMty : loc → v string → module_type → str_item;
    stOpn : loc → v (list string) → str_item;
    stTyp : loc → v (list type_decl) → str_item;
    stUse : loc → v string → v (list (str_item * loc)) → str_item;
    stVal : loc → v bool → v (list (patt * expr)) → str_item;
    stXtr : loc → string → option (v str_item) → str_item;
    ctAcc : loc → class_type → class_type → class_type;
    ctApp : loc → class_type → class_type → class_type;
    ctCon : loc → class_type → v (list ctyp) → class_type;
    ctFun : loc → ctyp → class_type → class_type;
    ctIde : loc → v string → class_type;
    ctSig : loc → v (option ctyp) → v (list class_sig_item) → class_type;
    ctXtr : loc → string → option (v class_type) → class_type;
    cgCtr : loc → ctyp → ctyp → class_sig_item;
    cgDcl : loc → v (list class_sig_item) → class_sig_item;
    cgInh : loc → class_type → class_sig_item;
    cgMth : loc → v bool → v string → ctyp → class_sig_item;
    cgVal : loc → v bool → v string → ctyp → class_sig_item;
    cgVir : loc → v bool → v string → ctyp → class_sig_item;
    ceApp : loc → class_expr → expr → class_expr;
    ceCon : loc → v (list string) → v (list ctyp) → class_expr;
    ceFun : loc → patt → class_expr → class_expr;
    ceLet : loc → v bool → v (list (patt * expr)) → class_expr → class_expr;
    ceStr : loc → v (option patt) → v (list class_str_item) → class_expr;
    ceTyc : loc → class_expr → class_type → class_expr;
    ceXtr : loc → string → option (v class_expr) → class_expr;
    crCtr : loc → ctyp → ctyp → class_str_item;
    crDcl : loc → v (list class_str_item) → class_str_item;
    crInh : loc → class_expr → v (option string) → class_str_item;
    crIni : loc → expr → class_str_item;
    crMth :
      loc → v bool → v bool → v string → v (option ctyp) → expr →
        class_str_item;
    crVal : loc → v bool → v bool → v string → expr → class_str_item;
    crVav : loc → v bool → v string → ctyp → class_str_item;
    crVir : loc → v bool → v string → ctyp → class_str_item;
    mloc : loc → loc;
    anti_loc : loc → loc → loc → loc }
;

value def : map_f;

value expr : map_f → expr → expr;
value patt : map_f → patt → patt;
value ctyp : map_f → ctyp → ctyp;
value str_item : map_f → str_item → str_item;
value sig_item : map_f → sig_item → sig_item;
value module_expr : map_f → module_expr → module_expr;
value module_type : map_f → module_type → module_type;

value class_str_item : map_f → class_str_item → class_str_item;
value class_sig_item : map_f → class_sig_item → class_sig_item;
value class_expr : map_f → class_expr → class_expr;
value class_type : map_f → class_type → class_type;

value poly_variant : map_f → poly_variant → poly_variant;
value with_constr : map_f → with_constr → with_constr;
value type_decl : map_f → type_decl → type_decl;
