(* camlp5r pa_macro.cmo *)
(* This file has been generated by program: do not edit! *)
(* Copyright (c) INRIA 2007-2010 *)

open Parsetree;;
open Longident;;
open Asttypes;;

(* *)

(* *)

(* *)

(* *)

(* *)

let sys_ocaml_version = Sys.ocaml_version;;

let ov = sys_ocaml_version in
let oi =
  let rec loop i =
    if i = String.length ov then i
    else
      match ov.[i] with
        ' ' | '+' -> i
      | _ -> loop (i + 1)
  in
  loop 0
in
let ov = String.sub ov 0 oi in
if ov <> Pconfig.ocaml_version then
  begin
    flush stdout;
    Printf.eprintf "\n";
    Printf.eprintf "This ocaml and this camlp5 are not compatible:\n";
    Printf.eprintf "- OCaml version is %s\n" sys_ocaml_version;
    Printf.eprintf "- Camlp5 compiled with ocaml %s\n" Pconfig.ocaml_version;
    Printf.eprintf "\n";
    Printf.eprintf "You need to recompile camlp5.\n";
    Printf.eprintf "\n";
    flush stderr;
    failwith "bad version"
  end;;

let ocaml_location (fname, lnum, bolp, bp, ep) =
  let loc_at n =
    {Lexing.pos_fname = if lnum = -1 then "" else fname;
     Lexing.pos_lnum = lnum; Lexing.pos_bol = bolp; Lexing.pos_cnum = n}
  in
  {Location.loc_start = loc_at bp; Location.loc_end = loc_at ep;
   Location.loc_ghost = bp = 0 && ep = 0}
;;

let ocaml_ptyp_poly = Some (fun cl t -> Ptyp_poly (cl, t));;

let ocaml_type_declaration params cl tk pf tm loc variance =
  {ptype_params = params; ptype_cstrs = cl; ptype_kind = tk;
   ptype_private = pf; ptype_manifest = tm; ptype_loc = loc;
   ptype_variance = variance}
;;

let ocaml_ptype_record ltl priv = Ptype_record ltl;;

let ocaml_ptype_variant ctl priv = Ptype_variant ctl;;

let ocaml_ptype_private = Ptype_abstract;;

let ocaml_pwith_type params tk pf ct variance loc =
  let pf = if pf then Private else Public in
  Pwith_type
    {ptype_params = params; ptype_cstrs = []; ptype_kind = tk;
     ptype_private = pf; ptype_manifest = ct; ptype_variance = variance;
     ptype_loc = loc}
;;

let ocaml_pexp_lazy = Some (fun e -> Pexp_lazy e);;

let ocaml_const_int32 = Some (fun s -> Const_int32 (Int32.of_string s));;

let ocaml_const_int64 = Some (fun s -> Const_int64 (Int64.of_string s));;

let ocaml_const_nativeint =
  Some (fun s -> Const_nativeint (Nativeint.of_string s))
;;

let ocaml_pexp_object = Some (fun cs -> Pexp_object cs);;

let module_prefix_can_be_in_first_record_label_only = true;;

let ocaml_ppat_lazy = Some (fun p -> Ppat_lazy p);;

let ocaml_ppat_record lpl = Ppat_record lpl;;

let ocaml_psig_recmodule = Some (fun ntl -> Psig_recmodule ntl);;

let ocaml_pstr_recmodule = Some (fun nel -> Pstr_recmodule nel);;

let ocaml_pctf_val (s, b, t, loc) = Pctf_val (s, b, Concrete, t, loc);;

let ocaml_pcf_inher ce pb = Pcf_inher (ce, pb);;

let ocaml_pcf_meth (s, b, e, loc) = Pcf_meth (s, b, e, loc);;

let ocaml_pcf_val (s, b, e, loc) = Pcf_val (s, b, e, loc);;

let ocaml_pexp_poly = Some (fun e t -> Pexp_poly (e, t));;

(**)

let action_arg s sl =
  function
    Arg.Unit f -> if s = "" then begin f (); Some sl end else None
  | Arg.Set r -> if s = "" then begin r := true; Some sl end else None
  | Arg.Clear r -> if s = "" then begin r := false; Some sl end else None
  | Arg.Rest f -> List.iter f (s :: sl); Some []
  | Arg.String f ->
      if s = "" then
        match sl with
          s :: sl -> f s; Some sl
        | [] -> None
      else begin f s; Some sl end
  | Arg.Int f ->
      if s = "" then
        match sl with
          s :: sl ->
            begin try f (int_of_string s); Some sl with
              Failure "int_of_string" -> None
            end
        | [] -> None
      else
        begin try f (int_of_string s); Some sl with
          Failure "int_of_string" -> None
        end
  | Arg.Float f ->
      if s = "" then
        match sl with
          s :: sl -> f (float_of_string s); Some sl
        | [] -> None
      else begin f (float_of_string s); Some sl end
  | Arg.Set_string r ->
      if s = "" then
        match sl with
          s :: sl -> r := s; Some sl
        | [] -> None
      else begin r := s; Some sl end
  | Arg.Set_int r ->
      if s = "" then
        match sl with
          s :: sl ->
            begin try r := int_of_string s; Some sl with
              Failure "int_of_string" -> None
            end
        | [] -> None
      else
        begin try r := int_of_string s; Some sl with
          Failure "int_of_string" -> None
        end
  | Arg.Set_float r ->
      if s = "" then
        match sl with
          s :: sl -> r := float_of_string s; Some sl
        | [] -> None
      else begin r := float_of_string s; Some sl end
  | Arg.Symbol (syms, f) ->
      begin match if s = "" then sl else s :: sl with
        s :: sl when List.mem s syms -> f s; Some sl
      | _ -> None
      end
  | Arg.Tuple _ -> failwith "Arg.Tuple not implemented"
  | Arg.Bool _ -> failwith "Arg.Bool not implemented"
;;

let arg_symbol =
  function
    Arg.Symbol (symbs, _) -> Some symbs
  | _ -> None
;;
