(* camlp5r *)
(* This file has been generated by program: do not edit! *)

(* #load "pa_extend.cmo";; *)
(* #load "q_MLast.cmo";; *)

let not_impl f x =
  let desc =
    if Obj.is_block (Obj.repr x) then
      "tag = " ^ string_of_int (Obj.tag (Obj.repr x))
    else "int_val = " ^ string_of_int (Obj.magic x)
  in
  failwith ("q_ast_r.ml: " ^ f ^ ", not impl: " ^ desc)
;;

module Meta =
  struct
    open MLast;;
    let loc = Stdpp.dummy_loc;;
    let rec expr_of_list elem =
      function
        [] -> MLast.ExUid (loc, "[]")
      | e :: el ->
          MLast.ExApp
            (loc, MLast.ExApp (loc, MLast.ExUid (loc, "::"), elem e),
             expr_of_list elem el)
    ;;
    let expr_of_option elem =
      function
        None -> MLast.ExUid (loc, "None")
      | Some e -> MLast.ExApp (loc, MLast.ExUid (loc, "Some"), elem e)
    ;;
    let expr_of_bool b =
      if b then MLast.ExUid (loc, "True") else MLast.ExUid (loc, "False")
    ;;
    let expr_of_type =
      let rec loop =
        function
          TyAcc (_, t1, t2) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "TyAcc")),
                     MLast.ExLid (loc, "loc")),
                  loop t1),
               loop t2)
        | TyAny _ ->
            MLast.ExApp
              (loc,
               MLast.ExAcc
                 (loc, MLast.ExUid (loc, "MLast"),
                  MLast.ExUid (loc, "TyAny")),
               MLast.ExLid (loc, "loc"))
        | TyApp (_, t1, t2) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "TyApp")),
                     MLast.ExLid (loc, "loc")),
                  loop t1),
               loop t2)
        | TyLid (_, s) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "TyLid")),
                  MLast.ExLid (loc, "loc")),
               MLast.ExStr (loc, s))
        | TyUid (_, s) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "TyUid")),
                  MLast.ExLid (loc, "loc")),
               MLast.ExStr (loc, s))
        | x -> not_impl "expr_of_type" x
      in
      loop
    ;;
    let patt_of_type =
      function
        TyLid (_, s) ->
          MLast.PaApp
            (loc,
             MLast.PaApp
               (loc,
                MLast.PaAcc
                  (loc, MLast.PaUid (loc, "MLast"),
                   MLast.PaUid (loc, "TyLid")),
                MLast.PaAny loc),
             MLast.PaStr (loc, s))
      | x -> not_impl "patt_of_type" x
    ;;
    let expr_of_patt =
      let rec loop =
        function
          PaLid (_, s) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "PaLid")),
                  MLast.ExLid (loc, "loc")),
               MLast.ExStr (loc, s))
        | PaTyc (_, p, t) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "PaTyc")),
                     MLast.ExLid (loc, "loc")),
                  loop p),
               expr_of_type t)
        | x -> not_impl "expr_of_patt" x
      in
      loop
    ;;
    let expr_of_expr =
      let rec loop =
        function
          ExAcc (_, e1, e2) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "ExAcc")),
                     MLast.ExLid (loc, "loc")),
                  loop e1),
               loop e2)
        | ExAnt (_, MLast.ExTup (_, [MLast.ExStr (_, ""); e])) -> e
        | ExApp (_, e1, e2) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "ExApp")),
                     MLast.ExLid (loc, "loc")),
                  loop e1),
               loop e2)
        | ExArr
            (_, [ExAnt (_, MLast.ExTup (_, [MLast.ExStr (_, "list"); e]))]) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "ExArr")),
                  MLast.ExLid (loc, "loc")),
               e)
        | ExArr (_, el) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "ExArr")),
                  MLast.ExLid (loc, "loc")),
               expr_of_list loop el)
        | ExIfe (_, e1, e2, e3) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExApp
                       (loc,
                        MLast.ExAcc
                          (loc, MLast.ExUid (loc, "MLast"),
                           MLast.ExUid (loc, "ExIfe")),
                        MLast.ExLid (loc, "loc")),
                     loop e1),
                  loop e2),
               loop e3)
        | ExInt (_, s, k) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "ExInt")),
                     MLast.ExLid (loc, "loc")),
                  MLast.ExStr (loc, s)),
               MLast.ExStr (loc, k))
        | ExFun (_, pwel) ->
            let pwel =
              expr_of_list
                (fun (p, eo, e) ->
                   MLast.ExTup
                     (loc, [expr_of_patt p; expr_of_option loop eo; loop e]))
                pwel
            in
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "ExFun")),
                  MLast.ExLid (loc, "loc")),
               pwel)
        | ExLet
            (_, rf,
             [MLast.PaAny _,
              ExAnt (_, MLast.ExTup (_, [MLast.ExStr (_, "list"); e1]))],
             e) ->
            let rf = expr_of_bool rf in
            let pel = e1 in
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExApp
                       (loc,
                        MLast.ExAcc
                          (loc, MLast.ExUid (loc, "MLast"),
                           MLast.ExUid (loc, "ExLet")),
                        MLast.ExLid (loc, "loc")),
                     rf),
                  pel),
               loop e)
        | ExLet (_, rf, pel, e) ->
            let rf = expr_of_bool rf in
            let pel =
              expr_of_list
                (fun (p, e) -> MLast.ExTup (loc, [expr_of_patt p; loop e]))
                pel
            in
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExApp
                       (loc,
                        MLast.ExAcc
                          (loc, MLast.ExUid (loc, "MLast"),
                           MLast.ExUid (loc, "ExLet")),
                        MLast.ExLid (loc, "loc")),
                     rf),
                  pel),
               loop e)
        | ExLid (_, s) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "ExLid")),
                  MLast.ExLid (loc, "loc")),
               MLast.ExStr (loc, s))
        | ExUid (_, s) ->
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExAcc
                    (loc, MLast.ExUid (loc, "MLast"),
                     MLast.ExUid (loc, "ExUid")),
                  MLast.ExLid (loc, "loc")),
               MLast.ExStr (loc, s))
        | x -> not_impl "expr_of_expr" x
      in
      loop
    ;;
    let patt_of_patt x = not_impl "patt_of_patt" x;;
    let patt_of_expr x = not_impl "patt_of_expr" x;;
    let expr_of_sig_item =
      function
        SgVal (_, s, t) ->
          if String.length s > 0 && s.[0] = ':' then
            let s = String.sub s 1 (String.length s - 1) in
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "SgVal")),
                     MLast.ExLid (loc, "loc")),
                  MLast.ExLid (loc, s)),
               expr_of_type t)
          else
            MLast.ExApp
              (loc,
               MLast.ExApp
                 (loc,
                  MLast.ExApp
                    (loc,
                     MLast.ExAcc
                       (loc, MLast.ExUid (loc, "MLast"),
                        MLast.ExUid (loc, "SgVal")),
                     MLast.ExLid (loc, "loc")),
                  MLast.ExStr (loc, s)),
               expr_of_type t)
      | x -> not_impl "expr_of_sig_item" x
    ;;
    let patt_of_sig_item =
      function
        SgVal (_, s, t) ->
          if String.length s > 0 && s.[0] = ':' then
            let s = String.sub s 1 (String.length s - 1) in
            MLast.PaApp
              (loc,
               MLast.PaApp
                 (loc,
                  MLast.PaApp
                    (loc,
                     MLast.PaAcc
                       (loc, MLast.PaUid (loc, "MLast"),
                        MLast.PaUid (loc, "SgVal")),
                     MLast.PaAny loc),
                  MLast.PaLid (loc, s)),
               patt_of_type t)
          else
            MLast.PaApp
              (loc,
               MLast.PaApp
                 (loc,
                  MLast.PaApp
                    (loc,
                     MLast.PaAcc
                       (loc, MLast.PaUid (loc, "MLast"),
                        MLast.PaUid (loc, "SgVal")),
                     MLast.PaAny loc),
                  MLast.PaStr (loc, s)),
               patt_of_type t)
      | x -> not_impl "patt_of_sig_item" x
    ;;
  end
;;

let expr_eoi = Grammar.Entry.create Pcaml.gram "expr";;
let patt_eoi = Grammar.Entry.create Pcaml.gram "patt";;
let sig_item_eoi = Grammar.Entry.create Pcaml.gram "sig_item";;
Grammar.extend
  [Grammar.Entry.obj (expr_eoi : 'expr_eoi Grammar.Entry.e), None,
   [None, None,
    [[Gramext.Snterm
        (Grammar.Entry.obj (Pcaml.expr : 'Pcaml__expr Grammar.Entry.e));
      Gramext.Stoken ("EOI", "")],
     Gramext.action
       (fun _ (x : 'Pcaml__expr) (loc : Token.location) -> (x : 'expr_eoi))]];
   Grammar.Entry.obj (patt_eoi : 'patt_eoi Grammar.Entry.e), None,
   [None, None,
    [[Gramext.Snterm
        (Grammar.Entry.obj (Pcaml.patt : 'Pcaml__patt Grammar.Entry.e));
      Gramext.Stoken ("EOI", "")],
     Gramext.action
       (fun _ (x : 'Pcaml__patt) (loc : Token.location) -> (x : 'patt_eoi))]];
   Grammar.Entry.obj (sig_item_eoi : 'sig_item_eoi Grammar.Entry.e), None,
   [None, None,
    [[Gramext.Snterm
        (Grammar.Entry.obj
           (Pcaml.sig_item : 'Pcaml__sig_item Grammar.Entry.e));
      Gramext.Stoken ("EOI", "")],
     Gramext.action
       (fun _ (x : 'Pcaml__sig_item) (loc : Token.location) ->
          (x : 'sig_item_eoi))]];
   Grammar.Entry.obj (Pcaml.expr : 'Pcaml__expr Grammar.Entry.e),
   Some (Gramext.Level "top"),
   [None, None,
    [[Gramext.Stoken ("", "let"); Gramext.Stoken ("", "$");
      Gramext.Stoken ("", "list"); Gramext.Stoken ("", ":"); Gramext.Sself;
      Gramext.Stoken ("", "in"); Gramext.Sself],
     Gramext.action
       (fun (e : 'Pcaml__expr) _ (e1 : 'Pcaml__expr) _ _ _ _
            (loc : Token.location) ->
          (let a = MLast.ExTup (loc, [MLast.ExStr (loc, "list"); e1]) in
           let pel = [MLast.PaAny loc, MLast.ExAnt (loc, a)] in
           MLast.ExLet (loc, false, pel, e) :
           'Pcaml__expr))]];
   Grammar.Entry.obj (Pcaml.expr : 'Pcaml__expr Grammar.Entry.e),
   Some (Gramext.Level "simple"),
   [None, None,
    [[Gramext.Stoken ("", "$"); Gramext.Stoken ("LIDENT", "");
      Gramext.Stoken ("", ":"); Gramext.Sself],
     Gramext.action
       (fun (e : 'Pcaml__expr) _ (k : string) _ (loc : Token.location) ->
          (let a = MLast.ExTup (loc, [MLast.ExStr (loc, k); e]) in
           MLast.ExAnt (loc, a) :
           'Pcaml__expr));
     [Gramext.Stoken ("", "$:"); Gramext.Sself],
     Gramext.action
       (fun (e : 'Pcaml__expr) _ (loc : Token.location) ->
          (let a = MLast.ExTup (loc, [MLast.ExStr (loc, ""); e]) in
           MLast.ExAnt (loc, a) :
           'Pcaml__expr))]];
   Grammar.Entry.obj (Pcaml.sig_item : 'Pcaml__sig_item Grammar.Entry.e),
   None,
   [None, None,
    [[Gramext.Stoken ("", "value"); Gramext.Stoken ("", "$:");
      Gramext.Stoken ("LIDENT", ""); Gramext.Stoken ("", ":");
      Gramext.Snterm
        (Grammar.Entry.obj (Pcaml.ctyp : 'Pcaml__ctyp Grammar.Entry.e))],
     Gramext.action
       (fun (t : 'Pcaml__ctyp) _ (s : string) _ _ (loc : Token.location) ->
          (MLast.SgVal (loc, ":" ^ s, t) : 'Pcaml__sig_item))]]];;

let apply_expr_entry =
  let f s = Grammar.Entry.parse expr_eoi (Stream.of_string s) in
  let expr s = Meta.expr_of_expr (f s) in
  let patt s = Meta.patt_of_expr (f s) in Quotation.ExAst (expr, patt)
;;

let apply_patt_entry =
  let f s = Grammar.Entry.parse patt_eoi (Stream.of_string s) in
  let expr s = Meta.expr_of_patt (f s) in
  let patt s = Meta.patt_of_patt (f s) in Quotation.ExAst (expr, patt)
;;

let apply_sig_item_entry =
  let f s = Grammar.Entry.parse sig_item_eoi (Stream.of_string s) in
  let expr s = Meta.expr_of_sig_item (f s) in
  let patt s = Meta.patt_of_sig_item (f s) in Quotation.ExAst (expr, patt)
;;

Quotation.add "expr" apply_expr_entry;;
Quotation.add "patt" apply_patt_entry;;

Quotation.add "sig_item" apply_sig_item_entry;;
